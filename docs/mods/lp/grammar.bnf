# top level declarations
<stmt> ::= <import>
         | <for>
         | <if>
         | <fn>
         | <ret>
         | <bind>
         | <logic>
         | <PASS>
         | <EOL>
         | <ERR>


# modules
<import> ::= <IMPORT> <SYM>


# loops
<for> ::= <FOR> <forcond> <fbody>

<forcond> ::= <forstmt> sepby ";"
            | <SYM> "in" <range>

<forstmt> ::= <bind> | <pipe>


# conditional branching
<if> ::= <IF> <pipe> <fbody> [<else>]

<else> ::= <ELSE> (<if>|<fbody>)


# functions
<fn> ::= "fn" <dot> {<typedsym>} "=" <fbody>

<fbody> ::= <INDENT> {<stmt>} <DEDENT>
          | <pipe>

<ret> :: = "return" <pipe>


# variables
<bind> ::= <typedsym> <bindop> <pipe>

<typedsym> ::= <dot> ":" <typeanno>
             | <dot>

<bindop> ::= "=" | "+=" | "-=" | "*=" | "/=" | "//*" | "%="

<typeanno> ::= "(" <typeanno> ")"
             | <dot> {<typeanno>}


# logic
<pipe> ::= <logic> "|>" <pipe>
         | <logic>

<logic> ::= <eqcmp> ("and"|"or") <logic>
          | <eqcmp>

<eqcmp> ::= <difcmp> ("=="|"!=") <eqcmp>
          | <difcmp>

<difcmp> ::= <expr> ("<"|">"|"<="|">=") <difcmp>
           | <expr>


# maths
<expr> ::= <term> {("+"|"-") <term>}

<term> ::= <fact> {("*"|"/"|"//"|"%") <fact>}

<fact> ::= "(" <pipe> ")"
         | <cast>

<cast> ::= <not> "as" <typeanno>
         | <not>

<not> ::= ("!"|"not") <neg>
        | <neg>

<neg> ::= "-" <atom>
        | <atom>

<atom> ::= <call>
         | <lit>


# function calls
<call> ::= <dot> [{<arg>}]
<arg> ::= "(" <pipe> ")"
        | <lit>

# constant literals
<lit> ::= <arr>
        | <range>
        | <INT>
        | <FLT>
        | <STR>
        | <CHR>
        | <dot>

<arr> ::= "[" <pipe> sepby "," "]"

<range> ::= <INT> ".." <INT>

<dot> ::= <SYM> "." <dot>
        | <SYM>
