# top level declarations
<stmt> ::= <import>
         | <fn>
         | <ERR>


# modules
<import> ::= <IMPORT> <SYM>


# functions
<fn> ::= <SYM> {<SYM>} "=" <expr>

<expr> ::= <if>
         | <let>
	 | <pipe>


# conditional branching
<if> ::= "if" <expr> <expr> [<else>]

<else> ::= "else" (<if>|<expr>)


# symbol binds
<let> ::= "let" <SYM> "=" <expr> ["in" <expr>]


# logic
<pipe> ::= <logic> {"|>" <logic>}

<logic> ::= <eqcmp> {("and"|"or") <eqcmp>}

<eqcmp> ::= <difcmp> {("=="|"!=") <difcmp>}

<difcmp> ::= <math> {("<"|">"|"<="|">=") <math>}


# maths
<math> ::= <term> {("+"|"-") <term>}

<term> ::= <fact> {("*"|"/"|"//"|"%") <fact>}

<fact> ::= "(" <pipe> ")"
         | <not>

<not> ::= ("!"|"not") <neg>
        | <neg>

<neg> ::= "-" <atom>
        | <atom>

<atom> ::= <call>
         | <lit>


# function calls
<call> ::= <dot> [{<arg>}]
<arg> ::= "(" <pipe> ")"
        | <lit>


# constant literals
<lit> ::= <arr>
        | <range>
        | <INT>
        | <FLT>
        | <STR>
        | <CHR>
        | <dot>

<arr> ::= "[" <pipe> sepby "," "]"

<range> ::= <INT> ".." <INT>

<dot> ::= <SYM> "." <dot>
        | <SYM>
